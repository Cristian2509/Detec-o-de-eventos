from keras.preprocessing.image import img_to_array, load_img
from keras.src.backend import conv3d_transpose
import numpy as np
import os
import cv2
from keras.layers import Conv3D, ConvLSTM2D, Conv3DTranspose
from keras.models import Sequential
from keras.callbacks import ModelCheckpoint, EarlyStopping
import imutils

# Caminhos e parâmetros
train_videos_path = r'C:\Users\User\Desktop\.vscode\Projetos Python\videos de treinamento\training_videos'
train_videos = os.listdir(train_videos_path)
fps = 5
train_images_path = os.path.join(train_videos_path, 'frames')
os.makedirs(train_images_path, exist_ok=True)

# Função para pré-processamento e armazenamento das imagens
def store_inarray(image_path):
    image = load_img(image_path)
    image = img_to_array(image)
    image = cv2.resize(image, (227, 227), interpolation=cv2.INTER_AREA)
    gray = 0.2989 * image[:, :, 0] + 0.5870 * image[:, :, 1] + 0.1140 * image[:, :, 2]
    return gray

store_image = []

# Processamento dos vídeos para frames
for video in train_videos:
    os.system(f'ffmpeg -i {train_videos_path}/{video} -r 1/{fps} {train_images_path}/frames/%03d.jpg')

# Processamento das imagens em frames
images = os.listdir(train_images_path)
for image in images:
    image_path = os.path.join(train_images_path, image)
    gray = store_inarray(image_path)
    store_image.append(gray)

store_image = np.array(store_image)
store_image = (store_image - store_image.mean()) / store_image.std()
store_image = np.clip(store_image, 0, 1)
np.save('training.npy', store_image)

# Definição do modelo
stae_model = Sequential()
#  camadas do modelo 

stae_model.add(Conv3D(filters=64, kernel_size=(3, 3, 3), activation='relu', padding='same', input_shape=(227, 227, 10, 1)))
stae_model.add(ConvLSTM2D(filters=128, kernel_size=(3, 3), activation='relu', padding='same', return_sequences=True))
stae_model.add(Conv3DTranspose(filters=1, kernel_size=(3, 3, 3), activation='relu', padding='same'))

# Compilação e treinamento do modelo
stae_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])
training_data = np.load('training.npy')
frames = training_data.shape[2]
frames = frames - frames % 10
training_data = training_data[:,:,:frames]
training_data = training_data.reshape(-1, 227, 227, 10)
training_data = np.expand_dims(training_data, axis=4)
target_data = training_data.copy()

epochs = 5
batch_size = 1

callback_save = ModelCheckpoint("saved_model.h5", monitor="mean_squared_error", save_best_only=True)
callback_early_stopping = EarlyStopping(monitor='val_loss', patience=3)

stae_model.fit(training_data, target_data, batch_size=batch_size, epochs=epochs, callbacks=[callback_save, callback_early_stopping])
stae_model.save("saved_model.h5")

# Carregamento do modelo treinado e teste
model = ("saved_model.h5")

cap = cv2.VideoCapture(r"C:\Users\User\Desktop\.vscode\Projetos Python\videos de treinamento\training_videos")

print(cap.isOpened())

while cap.isOpened():
    imagedump = []
    ret, frame = cap.read()

    for i in range(10):
        ret, frame = cap.read()
        image = imutils.resize(frame, width=700, height=600)
        frame = cv2.resize(frame, (227, 227), interpolation=cv2.INTER_AREA)
        gray = 0.2989 * frame[:, :, 0] + 0.5870 * frame[:, :, 1] + 0.1140 * frame[:, :, 2]
        gray = (gray - gray.mean()) / gray.std()
        gray = np.clip(gray, 0, 1)
        imagedump.append(gray)

    imagedump = np.array(imagedump)
    imagedump.resize(227, 227, 10)
    imagedump = np.expand_dims(imagedump, axis=0)
    imagedump = np.expand_dims(imagedump, axis=4)

    output = model.predict(imagedump)
    loss = (imagedump, output)

    if frame is None:
        print("none")

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

    if loss > 0.00068:
        print('Abnormal Event Detected')
        cv2.putText(image, "Abnormal Event", (100, 80), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 255), 4)

    cv2.imshow("video", image)

cap.release()
cv2.destroyAllWindows()